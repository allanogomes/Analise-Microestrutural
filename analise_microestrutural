import cv2
import numpy as np
import matplotlib.pyplot as plt

# Dimensões CP (variável de acordo com o sentido do corte)
base_cm = 10
altura_cm = 8

escala_cm_pixel = 0.1


# Análise e processamento da imagem
def processar_imagem(image_path):
    # Carregar a imagem
    image = cv2.imread(image_path)

    # Redimensionamento
    alta_resolucao = cv2.resize(image, None, fx=2, fy=2, interpolation=cv2.INTER_CUBIC)

    # Converter a imagem para escala de cinza
    gray_image = cv2.cvtColor(alta_resolucao, cv2.COLOR_BGR2GRAY)

    # Pré-processamento
    blurred_image = cv2.GaussianBlur(gray_image, (5, 5), 0)
    _, binary_image = cv2.threshold(blurred_image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

    # Detecção de agregados
    num_agregado, num_agregado_contato, distancia_pixels = mostrar_imagem_vetor(alta_resolucao, binary_image)

    # Calcular a densidade média dos agregados na imagem em cm²
    area_total = (num_agregado * base_cm * altura_cm) / (binary_image.size * 10)

    # Calcular a distância média entre os centros dos agregados detectados em centímetros
    distancia_media = (distancia_pixels * escala_cm_pixel) / 1000

    # Calcular o parâmetro de intertravamento
    intertravamento = num_agregado_contato / num_agregado if num_agregado > 0 else 0.0

    # Classificação dos agregados
    num_agregado_livre = num_agregado - num_agregado_contato
    classificacao = {
        'Agregados Livres': num_agregado_livre,
        'Agregados Intertravados': num_agregado_contato,
        'Total de Agregados': num_agregado
    }

    # Printar dados coletados
    
    print(f'Densidade Média de Agregados: {area_total:.5f} cm²')
    print(f'Distância Média entre Centros de Agregados: {distancia_media:.2f} cm')
    print(f'Intertravamento: {intertravamento:.2%}')

    for classe, quantidade in classificacao.items():
        print(f'{classe}: {quantidade}')

def mostrar_imagem_vetor(image, binary_image):
    # Filtro de abertura para remover ruídos pequenos
    kernel = np.ones((3, 3), np.uint8)
    opening = cv2.morphologyEx(binary_image, cv2.MORPH_OPEN, kernel)

    # Detectar os agregados usando o algoritmo de label
    num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(opening)

    num_agregado_contato = 0  # Contador de agregados com pontos de contato
    distances = {}

    for i in range(1, num_labels):
        x, y, w, h, _ = stats[i]
        center_x, center_y = centroids[i]

        # Calcula o contorno do agregado
        contour = cv2.findContours(np.uint8(labels == i), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[0][0]
        
        # Verifica se o contorno possui pontos de contato (área do contorno > 1)
        
        # ESSE IF É ESSENCIAL, ENTÃO CASO NÃO ESTEJA PRECISO, ALTERAR A AREA DO CONTORNO
        
        if cv2.contourArea(contour) > 110:
            num_agregado_contato += 1
            color = (0, 0, 255) 
            
        else:
            # Verifica se há outros agregados nas proximidades
            
            proximo = False
            for j in range(1, num_labels):
                if i != j:
                    center_x2, center_y2 = centroids[j]
                    distance = np.linalg.norm([center_x - center_x2, center_y - center_y2])
                    if distance < 10:  # ALTERAR ESSE VALOR CONFORME NECESSÁRIO
                        proximo = True
                        break
                    
                    # Setar cor para distinção dos dois tipos de agregados
            if proximo:
                num_agregado_contato += 1
                color = (0, 0, 255)  # Cor para agregados intertravados
            else:
                color = (0, 255, 0)  # Cor para agregados livres

        cv2.drawContours(image, [contour], -1, color, 2)

        # Calcular as distâncias entre os centros dos agregados
        for j in range(i + 1, num_labels):
            x2, y2, _, _, _ = stats[j]
            center_x2, center_y2 = centroids[j]
            distance = np.linalg.norm([center_x - center_x2, center_y - center_y2])
            distances[(i, j)] = distance

    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.title(f'Imagem processada - {image_path.split("/")[-1]}')
    plt.show()

    return num_labels - 1, num_agregado_contato, np.mean(list(distances.values())) if distances else 0.0

# Colar aqui o caminho da imagem no sistema
image_path = r"C:\Users\allan\Pictures\rcd3.jpg"
processar_imagem(image_path)
